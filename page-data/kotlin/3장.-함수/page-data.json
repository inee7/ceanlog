{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin/3장.-함수/","result":{"data":{"site":{"siteMetadata":{"title":"어쩌다 코딩","author":"inee7","siteUrl":"https://inee7.github.io","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":"inee7"}}},"markdownRemark":{"id":"2c6a1bb0-fa14-51e1-ac07-9dd8cb44ae01","excerpt":"콜렉션에서 함수 정적인 유틸클래스 없애기 : 최상위 함수와 프로퍼티 최상위 프로퍼티 메서드를 다른 클래스에 추가 : 확장함수와 확장프로퍼티 확장 함수로 유틸리티 함수 정의 확장 프로퍼티 컬렉션 처리: 가변 길이 인자, 중위 함수 호출, 라이브러리 지원 자바 컬렉션 API…","html":"<ul>\n<li><a href=\"#%EC%BD%9C%EB%A0%89%EC%85%98%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98\">콜렉션에서 함수</a></li>\n<li>\n<p><a href=\"#%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%9C%A0%ED%8B%B8%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%97%86%EC%95%A0%EA%B8%B0--%EC%B5%9C%EC%83%81%EC%9C%84-%ED%95%A8%EC%88%98%EC%99%80-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">정적인 유틸클래스 없애기 : 최상위 함수와 프로퍼티</a></p>\n<ul>\n<li><a href=\"#%EC%B5%9C%EC%83%81%EC%9C%84-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">최상위 프로퍼티</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EB%8B%A4%EB%A5%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EC%B6%94%EA%B0%80--%ED%99%95%EC%9E%A5%ED%95%A8%EC%88%98%EC%99%80-%ED%99%95%EC%9E%A5%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">메서드를 다른 클래스에 추가 : 확장함수와 확장프로퍼티</a></li>\n<li><a href=\"#%ED%99%95%EC%9E%A5-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98\">확장 함수로 유틸리티 함수 정의</a></li>\n<li><a href=\"#%ED%99%95%EC%9E%A5-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">확장 프로퍼티</a></li>\n<li>\n<p><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%B2%98%EB%A6%AC-%EA%B0%80%EB%B3%80-%EA%B8%B8%EC%9D%B4-%EC%9D%B8%EC%9E%90-%EC%A4%91%EC%9C%84-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%A7%80%EC%9B%90\">컬렉션 처리: 가변 길이 인자, 중위 함수 호출, 라이브러리 지원</a></p>\n<ul>\n<li><a href=\"#%EC%9E%90%EB%B0%94-%EC%BB%AC%EB%A0%89%EC%85%98-api-%ED%99%95%EC%9E%A5\">자바 컬렉션 API 확장</a></li>\n<li><a href=\"#%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%9E%90-%ED%95%A8%EC%88%98-%EC%9D%B8%EC%9E%90%EC%9D%98-%EA%B0%9C%EC%88%98%EA%B0%80-%EB%8B%AC%EB%9D%BC%EC%A7%88-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98\">가변 인자 함수: 인자의 개수가 달라질 수 있는 함수 정의</a></li>\n<li><a href=\"#%EA%B0%92%EC%9D%98-%EC%8C%8D-%EB%8B%A4%EB%A3%A8%EA%B8%B0-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%EC%84%A0%EC%96%B8\">값의 쌍 다루기: 구조 분해 선언</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%A1%9C%EC%BB%AC-%ED%95%A8%EC%88%98%EC%99%80-%ED%99%95%EC%9E%A5\">로컬 함수와 확장</a></li>\n</ul>\n<h2 id=\"콜렉션에서-함수\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%A0%89%EC%85%98%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98\" aria-label=\"콜렉션에서 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜렉션에서 함수</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">hashMapOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"seven\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"fifty-three\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">to</code> 는 키워드가 아니라 <code class=\"language-text\">함수</code></p>\n<ul>\n<li>코틀린은 자바의 컬렉션에다가 더 많은 기능을 제공</li>\n<li>이 많은 기능을 코틀린은 함수를 통해 해결한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token function\">hashSetOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* 집합 */</span>\n<span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* 리스트 */</span>\n<span class=\"token keyword\">val</span> map <span class=\"token operator\">=</span> <span class=\"token function\">hashMapOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"seven\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"fifty-three\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* 맵 */</span>\n<span class=\"token comment\">/* 코틀린에서 사용하는 컬렉션은 자바의 컬렉션이다. */</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span>javaClass<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// class java.util.HashSet</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>javaClass<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// class java.util.ArrayList</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>javaClass<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// class java.util.HashMap</span>\n\n<span class=\"token comment\">/* 자바에는 없는 컬렉션 기능을 제공한다. */</span>\n<span class=\"token keyword\">val</span> strings <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"second\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fourteenth\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 마지막 요소를 반환 fourteenth</span>\n\n<span class=\"token keyword\">val</span> numbers <span class=\"token operator\">=</span> <span class=\"token function\">setOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 최대값 반환 14</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>\n    collection<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    separator<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    prefix<span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">withIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (1; 2; 3)</span></code></pre></div>\n<ul>\n<li>위 함수를 <code class=\"language-text\">joinToString(collection, \" \", \" \", \".\")</code>와 같이 호출한다고 하면 각 문자열이 무슨 역할을 하는지 구분이 모호하다.</li>\n<li>자바에서는 아래와 같이 코딩하기도 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* 자바 */</span>\n<span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">,</span> \n <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* seprarator */</span>\n <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* prefix */</span>\n<span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* postfix */</span> </code></pre></div>\n<ul>\n<li>코틀린에서는 다음과 같이 표현 할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 코틀린 */</span>\n<span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">,</span> separator <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> postfix <span class=\"token operator\">=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>코틀린에서는 함수의 파라미터에 디폴트 값을 지정할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>\n    collection<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/* 디폴트 값 지정 */</span>\n    separator<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> \n    prefix<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    prefix<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String \n<span class=\"token comment\">/* 디폴트 값 선언으로 아래와 같이 파라미터를 생략하여 호출 가능하다 */</span>\n\n<span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, 2, 3</span>\n\n<span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1; 2; 3</span>\n\n<span class=\"token comment\">/* 인자의 이름을 붙여 순서와 관계 없이 호출할 수 있다. */</span>\n<span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> postfix <span class=\"token operator\">=</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">,</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// # 1, 2, 3;</span></code></pre></div>\n<ul>\n<li>자바에서는 디폴트 파라미터 개념이 없어, 코틀린 함수를 자바에서 호출하는 경우에는 모든 인자를 명시해야 한다.</li>\n<li>또는 <code class=\"language-text\">@JvmOverloads</code> 애노테이션을 추가하게 되면 코틀린 컴파일러가 자동으로 오버로딩한 자바 메소드를 생성 해준다.</li>\n</ul>\n<h2 id=\"정적인-유틸클래스-없애기--최상위-함수와-프로퍼티\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%9C%A0%ED%8B%B8%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%97%86%EC%95%A0%EA%B8%B0--%EC%B5%9C%EC%83%81%EC%9C%84-%ED%95%A8%EC%88%98%EC%99%80-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"정적인 유틸클래스 없애기  최상위 함수와 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적인 유틸클래스 없애기 : 최상위 함수와 프로퍼티</h2>\n<ul>\n<li>코틀린은 클래스 밖에 함수를 위치 시키는 것이 가능하다. <br>\n자바는 클래스 안에 모든 메소드를 선언해야 한다. <br>\n그 결과 다양한 정적 메소드를 모아두는 역할만 담당해서 상태나 <code class=\"language-text\">인스턴스메서드가 없는 클래스가 생겨난다.</code> <br>\nex) Collections, Util</li>\n<li>\n<p>joinToString 함수를 strings 패키지에 넣는 방법은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* join.kt */</span>\n<span class=\"token keyword\">package</span> strings\n<span class=\"token keyword\">fun</span> <span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>위 코틀린 코드를 자바 코드 변환하면 아래와 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">strings</span><span class=\"token punctuation\">;</span>\npulbic <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoinKt</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">/* 코틀린 파일명으로 클래스 이름 생성 */</span>   \n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"최상위-프로퍼티\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%83%81%EC%9C%84-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"최상위 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최상위 프로퍼티</h3>\n<ul>\n<li>함수와 마찬가지로 프로퍼티도 최상위 수준에 놓을 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> opCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">performOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    opCount<span class=\"token operator\">++</span>    <span class=\"token comment\">// ...}</span></code></pre></div>\n<ul>\n<li>기본적인 최상위 프로퍼티도 게터와 세터로 접근해야 한다.</li>\n<li>상수처럼 보이는 값의 경우는 <code class=\"language-text\">const</code> 변경자를 추가하면 자바의 <code class=\"language-text\">public static final</code> 필드로 컴파일 해준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> UNIX_LIN_SEPARATOR <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span></code></pre></div>\n<h2 id=\"메서드를-다른-클래스에-추가--확장함수와-확장프로퍼티\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EB%8B%A4%EB%A5%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EC%B6%94%EA%B0%80--%ED%99%95%EC%9E%A5%ED%95%A8%EC%88%98%EC%99%80-%ED%99%95%EC%9E%A5%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"메서드를 다른 클래스에 추가  확장함수와 확장프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드를 다른 클래스에 추가 : 확장함수와 확장프로퍼티</h2>\n<ul>\n<li>확장 함수Extension function는 기존 자바 API를 재작성하지 않고 기능을 추가할 수 있는 것을 말한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 확장 함수를 통해 문자열의 마지막 문자를 돌려주는 메소드 추가 */</span>\n<span class=\"token keyword\">package</span> strings\n<span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">lastChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Char <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>확장 함수를 만드려면 추가하려는 함수 이름 앞에 그 함수가 확장할 클래스의 이름을 덧붙이기만 하면 된다.</li>\n<li>클래스 이름을 <code class=\"language-text\">수신 객체 타입</code> receiver type, 확장 함수가 호출되는 대상이 되는 값을 <code class=\"language-text\">수식 객체</code> receiver object 라고 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">lastChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Char <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>     \n          ↑                                     ↑        ↑   \n  수식 객체 타입                수신객체   수신객체\n\n  <span class=\"token comment\">/* 호출은 일반 클래스 멤버를 호출하는 구문과 동일하다 */</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kotlin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">lastChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// n</span></code></pre></div>\n<ul>\n<li>함수 본문에서 this 생략이 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> strings\n<span class=\"token comment\">/* 확장 함수 본문에는 this를 생략할 수 있다. */</span>\n<span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">lastChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Char <span class=\"token operator\">=</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>확장 함수는 기존 메소드 내부의 캡슐화를 깨지 않는다.</li>\n<li>기존 메소드의 <code class=\"language-text\">private</code>나 <code class=\"language-text\">protected</code> 멤버를 사용할 수 없다.</li>\n<li>확장 함수를 정의했다고 해도 자동으로 프로젝트 안의 모든 소스코드에서 그 함수를 사용할 수 있지 않다.</li>\n<li>임포트는 아래와 같이 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> strings<span class=\"token punctuation\">.</span>lastChar\n<span class=\"token keyword\">val</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"kotlin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">lastChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> strings<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">val</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"kotlin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">lastChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> strings<span class=\"token punctuation\">.</span>lastChar <span class=\"token keyword\">as</span> last\n<span class=\"token keyword\">val</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"kotlin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>확장 함수는, 자바에서는 전체 패키지 경로를 사용하여 호출 가능 하지만, 코틀린의 경우는 반드시 <code class=\"language-text\">import</code>를 사용해야 하며, 다른 패키지에 같은 이름의 함수가 있는 경우는 <code class=\"language-text\">as</code>를 사용하여 함수 이름을 바꾸는 것 유일한 방법이다.</li>\n</ul>\n<h2 id=\"확장-함수로-유틸리티-함수-정의\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98\" aria-label=\"확장 함수로 유틸리티 함수 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장 함수로 유틸리티 함수 정의</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"> <span class=\"token comment\">/* joinToString 함수의 최종 버전 */</span>\n<span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>\n    separator<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span>\n    prefix<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    postfix<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">withIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>separator <span class=\"token operator\">=</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">,</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">,</span> postfix <span class=\"token operator\">=</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (1; 2; 3)</span>\n\n<span class=\"token keyword\">val</span> list2 <span class=\"token operator\">=</span> <span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 2 3</span></code></pre></div>\n<ul>\n<li>특정 타입에 대한 수신 객체 타입을 지정할 수 있다. 문자열 컬렉션에 대해서만 호출할 수 있는 join 함수는 아래와 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Collection<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>separator<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> prefix<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> postfix<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">joinToString</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> postfix<span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eight\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// one two eight</span>\n\n<span class=\"token comment\">/* 정수 타입의 컬렉션에 대해서는 오류가 발생한다. */</span>\n<span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Error: Type mismatch: inferred type is List&lt;Int> but Collection&lt;String></span></code></pre></div>\n<ul>\n<li>확장 함수는 오버라이드 불가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"> <span class=\"token comment\">/* 일반적인 오버라이드를 구현한 코드 */</span>\n<span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> View <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">open</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"View clicked\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Button <span class=\"token operator\">:</span> <span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button clicked\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nview<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Button clicked </span>\n\n\n<span class=\"token comment\">/* 확장 함수가 오버라이드 불가능함을 보여주는 코드 */</span>\n<span class=\"token keyword\">fun</span> View<span class=\"token punctuation\">.</span><span class=\"token function\">showOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a view!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> Button<span class=\"token punctuation\">.</span><span class=\"token function\">showOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a button\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nview<span class=\"token punctuation\">.</span><span class=\"token function\">showOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// I'm a view!</span></code></pre></div>\n<h2 id=\"확장-프로퍼티\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"확장 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장 프로퍼티</h2>\n<ul>\n<li>확장 프로퍼티를 사용하면 기존 클래스 객체에 대한 프로퍼티 형식의 구문으로 사용할 수 있는 API를 추가 할 수 있다.</li>\n<li>하지만 기존 클래스에 필드를 추가할 방법이 없으므로 상태 저장은 불가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 확장 프로퍼티 선언하기 */</span>\n<span class=\"token keyword\">val</span> String<span class=\"token punctuation\">.</span>lastChar<span class=\"token operator\">:</span> Char\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 변경 가능한 확장 프로퍼티 선언하기 */</span>\n<span class=\"token keyword\">var</span> StringBuilder<span class=\"token punctuation\">.</span>lastChar<span class=\"token operator\">:</span> Char\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* 프로퍼티 게터 */</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Char<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCharAt</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kotlin\"</span><span class=\"token punctuation\">.</span>lastChar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// n</span>\n\n<span class=\"token keyword\">val</span> sb <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kotlin?\"</span><span class=\"token punctuation\">)</span>\n\nsb<span class=\"token punctuation\">.</span>lastChar <span class=\"token operator\">=</span> <span class=\"token string\">'!'</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Kotlin!</span></code></pre></div>\n<h2 id=\"컬렉션-처리-가변-길이-인자-중위-함수-호출-라이브러리-지원\" style=\"position:relative;\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%B2%98%EB%A6%AC-%EA%B0%80%EB%B3%80-%EA%B8%B8%EC%9D%B4-%EC%9D%B8%EC%9E%90-%EC%A4%91%EC%9C%84-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%A7%80%EC%9B%90\" aria-label=\"컬렉션 처리 가변 길이 인자 중위 함수 호출 라이브러리 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션 처리: 가변 길이 인자, 중위 함수 호출, 라이브러리 지원</h2>\n<ul>\n<li><code class=\"language-text\">vararg</code> 키워드를 사용하면 함수의 인자 개수에 관계없이 호출 가능한 함수를 정의할 수 있다.</li>\n<li>중위<code class=\"language-text\">ìnfix</code> 함수 호출 구문을 사용하면 인자가 하나뿐인 메소드를 편하게 호출 할 수 있다.</li>\n<li>구조 분해 선언<code class=\"language-text\">destructuring declaration</code>을 사용하면 복합적인 값을 분해해서 여러 변수에 나눠 담을 수 있다.</li>\n</ul>\n<h3 id=\"자바-컬렉션-api-확장\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%BB%AC%EB%A0%89%EC%85%98-api-%ED%99%95%EC%9E%A5\" aria-label=\"자바 컬렉션 api 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 컬렉션 API 확장</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> strings<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"second\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fourteenth\"</span><span class=\"token punctuation\">)</span>\n\nstrings<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// fourteenth</span>\n\n<span class=\"token keyword\">val</span> numbers<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">setOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 14</span></code></pre></div>\n<ul>\n<li>위 코드에서 <code class=\"language-text\">last</code>와 <code class=\"language-text\">max</code>는, 자바에는 없는, 코틀린에서 Java 컬렉션에 추가한 <code class=\"language-text\">확장 함수</code>이다.</li>\n</ul>\n<h3 id=\"가변-인자-함수-인자의-개수가-달라질-수-있는-함수-정의\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%9E%90-%ED%95%A8%EC%88%98-%EC%9D%B8%EC%9E%90%EC%9D%98-%EA%B0%9C%EC%88%98%EA%B0%80-%EB%8B%AC%EB%9D%BC%EC%A7%88-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98\" aria-label=\"가변 인자 함수 인자의 개수가 달라질 수 있는 함수 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변 인자 함수: 인자의 개수가 달라질 수 있는 함수 정의</h3>\n<ul>\n<li>리스트를 생성하는 코드를 보면 함수를 호출할 때 매개변수의 개수가 일정하지 않다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>라이브러리에서 이 함수의 정의를 보면 아래와 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> listOf<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> values<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>코틀린에서는 가변 길이 인자vararg를 생성할 때는 <code class=\"language-text\">vararg</code> 키워드를 붙이면 매개변수는 개수에 관계 없이 인자를 받을 수 있다. 자바의 경우 타입 뒤에 <code class=\"language-text\">...</code>을 붙인다.</li>\n<li>가변 길이 인자에 배열을 넣는 경우 자바에서는 배열을 그냥 넘기면 되지만, 코틀린에서는 배열을 명시적으로 풀어 전달해야 하며, 이를 가능하게 해주는 <strong>스프레드spread 연산자</strong> 사용하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"args: \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>   \n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"값의-쌍-다루기-구조-분해-선언\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%9D%98-%EC%8C%8D-%EB%8B%A4%EB%A3%A8%EA%B8%B0-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%EC%84%A0%EC%96%B8\" aria-label=\"값의 쌍 다루기 구조 분해 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값의 쌍 다루기: 구조 분해 선언</h3>\n<ul>\n<li>구조 분해 선언destructuring declaration을 사용하면, 아래 예제와 같이 index와 value를 동시에 변수에 담을 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">withIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>index<span class=\"token delimiter variable\">}</span></span>: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>element<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"로컬-함수와-확장\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC-%ED%95%A8%EC%88%98%EC%99%80-%ED%99%95%EC%9E%A5\" aria-label=\"로컬 함수와 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬 함수와 확장</h2>\n<ul>\n<li>자바에서 DRY 지키기 어려움. 중복 피하기 위해 리팩토링 진행 하다보면 메소드가 작고 많아져 이해하기 어려워 질수 있다. 내부 함수로 해결 할 수 있음</li>\n<li>코틀린에서는 함수를 함수 내부에 중첩시킬 수 있다. 이를 로컬 함수라고 부르며, <code class=\"language-text\">코드 중복을 제거하는데 유용하게 쓰인다.</code></li>\n<li>필자 생각에 아주 편해 보이지만 코드가 지저분해질 수도 있다. 한곳에서 직관적으로 보기 위할 때 쓰면 될것 같다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> address<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 필드 검증이 중복 된다. */</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't save user <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>user<span class=\"token punctuation\">.</span>id<span class=\"token delimiter variable\">}</span></span>: empty Name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 필드 검증이 중복 된다. */</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't save user <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>user<span class=\"token punctuation\">.</span>id<span class=\"token delimiter variable\">}</span></span>: empty Address\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// java.lang.IllegalArgumentException: Can't save user 1: empty Name</span></code></pre></div>\n<ul>\n<li>위 코드를 로컬 함수로 변경하면 중복을 없애는 동시에 코드 구조를 깔끔하게 유지할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 로컬 함수를 사용해 코드 중복 줄이기 */</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> address<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> fieldName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 필드 검증하는 로컬 함수를 선언 */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Can't save user <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>user<span class=\"token punctuation\">.</span>id<span class=\"token delimiter variable\">}</span></span>: \"</span> <span class=\"token comment\">/* 바깥 함수의 파라미터(user)에 직접 접근 가능하다. */</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"empty <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>fieldName<span class=\"token delimiter variable\">}</span></span>\"</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Address\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 예제를 좀 더 개선하고 싶은 경우 <code class=\"language-text\">validate</code>함수를 User 클래스의 확장 함수로 만들 수도 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 검증 로직을 확장 함수로 추출하기 */</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> address<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">validateBeforeSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> fieldName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Can't save user <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>id<span class=\"token delimiter variable\">}</span></span>: empty <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>fieldName<span class=\"token delimiter variable\">}</span></span>\"</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token comment\">/* User의 프로퍼티를 직접 사용할 수 있다. */</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Address\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    user<span class=\"token punctuation\">.</span><span class=\"token function\">validateBeforeSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* 확장 함수 호출 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"3장. 함수","date":"September 05, 2021"}}},"pageContext":{"slug":"/kotlin/3장.-함수/","previous":{"fields":{"slug":"/kotlin/1장. kotlin 개요/"},"frontmatter":{"title":"1장. kotlin 개요"}},"next":null}},"staticQueryHashes":["3128451518","767493094"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin/2장.-코틀린-기초-문법/","result":{"data":{"site":{"siteMetadata":{"title":"어쩌다 코딩","author":"inee7","siteUrl":"https://inee7.github.io","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":"inee7"}}},"markdownRemark":{"id":"753afc44-343a-54ed-9bda-fd0c7c640880","excerpt":"자바와 차이점 꼭 클래스 안에 함수 넣을 필요 없음 , 최상위 수준에 정의 가능  배열에 관한 문법 없음 println 표준 라이브러리 간결하게 쓸수 있게 래퍼 제공  자바에서는 모든 제어구조가 문이지만 코틀린은 루프제외하고 대부분 식식은 값을 만들어 내며 다른 식의 하위 요소로 계산에 참여 가능 자바에서 대입(assign, =)은 식이었으나 코틀린에서는 문이 되었다. 따라서 아래와 같은 차이가 있다  으로 할당을 하면서바로 != null로 비교 가능하다. \n대입(=)이 문이므로 아래 while…","html":"<h2 id=\"자바와-차이점\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%99%80-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"자바와 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바와 차이점</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>꼭 클래스 안에 함수 넣을 필요 없음 , 최상위 수준에 정의 가능</p>\n<p><code class=\"language-text\">배열도 클래스와 마찬가지</code> 배열에 관한 문법 없음</p>\n<p>println 표준 라이브러리 간결하게 쓸수 있게 래퍼 제공</p>\n<p><code class=\"language-text\">세미콜론 붙이지 않아도 됨</code></p>\n<p>자바에서는 모든 제어구조가 문이지만 코틀린은 루프제외하고 대부분 식식은 값을 만들어 내며 다른 식의 하위 요소로 계산에 참여 가능</p>\n<p>자바에서 대입(assign, =)은 식이었으나 코틀린에서는 문이 되었다.</p>\n<p>따라서 아래와 같은 차이가 있다</p>\n<p><code class=\"language-text\">line = bufReader.readLine()</code> 으로 할당을 하면서바로 != null로 비교 가능하다.</p>\n<p><code class=\"language-text\">while((line = bufReader.readLine()) != null) { ...}/*</code>\n대입(=)이 문이므로 아래 while 조건문 안의(line = bufReader.readLine()) 자체가 컴파일 에러다</p>\n<p><code class=\"language-text\">while((line = bufReader.readLine()) != null) { // &lt;-- 이 문장은 오류다 ...}</code></p>\n<h2 id=\"식이-본문인-함수\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EC%9D%B4-%EB%B3%B8%EB%AC%B8%EC%9D%B8-%ED%95%A8%EC%88%98\" aria-label=\"식이 본문인 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>식이 본문인 함수</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/* 위 함수를 간소화 하면 아래와 같다 */fun main(a: Int, b: Int): Int = if (a > b) a else b/* 위 간소화 된 함수에서 리턴 타입을 제거하고 한 번 더 간소화 할 수 있다 */fun main(a: Int, b: Int) = if (a > b) a else b</code></pre></div>\n<ul>\n<li><code class=\"language-text\">식이 본문인 함수</code>는 <code class=\"language-text\">타입 추론</code>을 통해 리턴 타입을 컴파일러가 결정 가능하므로 리턴 타입 생략이 가능하다.</li>\n<li>등호와 식으로 이루어진 함수를 <code class=\"language-text\">식이 본문인 함수</code>라고 부른다.</li>\n</ul>\n<h2 id=\"블럭이-본문인-함수\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%9F%AD%EC%9D%B4-%EB%B3%B8%EB%AC%B8%EC%9D%B8-%ED%95%A8%EC%88%98\" aria-label=\"블럭이 본문인 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블럭이 본문인 함수</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fun max(a: Int, b: Int): Int {    return if (a > b) a else b}</code></pre></div>\n<ul>\n<li>함수의 본문을 중괄호로 감싸면 <code class=\"language-text\">블록이 본문인 함수</code>라고 부르고,</li>\n</ul>\n<h2 id=\"변수\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98\" aria-label=\"변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수</h2>\n<p>초기화를 하면 타입추론이 가능하다. 선언만 하면 타입 지정 해야한다.</p>\n<ul>\n<li><code class=\"language-text\">val(value에서 따옴)</code> - 변경 불가능(immutable) 참조를 저장하는 변수. 초기화 후에는 재대입이 불가능. 자바로 말하면 <code class=\"language-text\">final</code> 변수에 해당</li>\n<li><code class=\"language-text\">var(variable에서 따옴)</code> - 변경 가능(mutable) 참조. 값은 바뀔 수 있다. 자바의 일반 변수에 해당</li>\n<li>코틀린에서는 가능한 <code class=\"language-text\">val</code> 키워드를 사용해 불변 변수 사용을 권장. 나중에 꼭 필요한 경우에만 <code class=\"language-text\">var</code>로 변경하라</li>\n<li><code class=\"language-text\">val</code> 변수는 정확히 한 번만 초기화 되어야 한다. 조건에 따라 다른 여러 값으로 초기화 가능하다. 아래 예제 참고.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">val message: Stringif (isSuccess()) {    message = \"Success\"}else {    message = \"Failed\"}</code></pre></div>\n<ul>\n<li><code class=\"language-text\">val</code> 변수의 주의할 사항은 <strong>참조 자체가 불변</strong>이라는 점이다. <strong>참조가 가르키는 객체 내부의 값은 변경 가능</strong>하다. 아래 예 참고</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">val lang = arrayListOf(\"Java\") /* 불변 참조를 선언 */lang.add(\"Kotlin\")             /* 참조가 아닌 객체 내부를 변경하므로 에러 아님 */lang = arrayListOf(\"C\")        /* 에러!! 참조를 변경 */</code></pre></div>\n<ul>\n<li><code class=\"language-text\">var</code> 변수는 값 변경은 가능하나, 초기화 시점의 변수 타입은 고정이다. 따라서 아래 예제는 오류를 발생한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var answer = 42answer = \"no answer\"  /* 컴파일 에러!! Type mismatch */</code></pre></div>\n<h2 id=\"문자열템플릿\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%ED%85%9C%ED%94%8C%EB%A6%BF\" aria-label=\"문자열템플릿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열템플릿</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fun main(args: Array&lt;String>) {    val name = if(args.size > 0) args[0] else \"Kotlin\"    println(\"Hello, $name\")    println(\"Hello, ${name}\")  /* 중괄호 사용 */}</code></pre></div>\n<ul>\n<li>코틀린은 문자열 템플릿(String Template)을 지원한다. 아래 예제에서 println 안의 <code class=\"language-text\">$name</code>이 문자열 템플릿이다. 가능한 문자열 템플릿은 중괄호로 묶어 <code class=\"language-text\">${name}</code>처럼 사용하는 것이\n좋다. 중괄호를 안 하고 한글과 같이 쓰면 컴파일할때 unresolved reference오류가 난다.</li>\n</ul>\n<h2 id=\"클래스와-프로퍼티\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"클래스와 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 프로퍼티</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* 자바 */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 코틀린 */</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token comment\">// 이런 유형의 데이터만 있는 클래스를 값 객체라고 함 </span></code></pre></div>\n<ul>\n<li>확실히 줄어든 코드량</li>\n<li>public 클래스가 기본</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 클래스 안에서 변경 가능한 프로퍼티 선언 */</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> nane<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>        <span class=\"token comment\">/* 읽기전용 프로퍼티 */</span>\n    비공개필드<span class=\"token punctuation\">,</span>\n    공개게터생성\n    <span class=\"token keyword\">var</span> isMarried<span class=\"token operator\">:</span> Boolean   <span class=\"token comment\">/* 쓰기 가능한 프로퍼티 */</span>\n    비공개필드<span class=\"token punctuation\">,</span>\n    공개세터<span class=\"token punctuation\">,</span>\n    공개게터\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  new하지 않는다<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>Bob<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>isMarried<span class=\"token punctuation\">)</span><span class=\"token boolean\">true</span></code></pre></div>\n<ul>\n<li>클래스라는 개념의 목적은 <code class=\"language-text\">캡슐화</code> 데이터를 다루는 코드를 한 주체 아래 가두는 것</li>\n<li>멤버 필드를 비공개로 하고 클라이언트가 쓸 통로를 만들어 허용한다.</li>\n<li>자바에서는 필드와 접근자를 한데 묶어 <code class=\"language-text\">프로퍼티</code>라고 함</li>\n<li>코틀린은 프로퍼티를 언어 기본으로 제공하여 자바의 필드와 접근자 메소드를 완전 대신</li>\n<li>프로퍼티는 val, var 둘다 가능</li>\n<li>new 키워드를 쓰지 않는다</li>\n<li>프로퍼티 이름이 is로 시작하면 게터는 is- 그대로 쓴다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> height<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> width<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> isSquare<span class=\"token operator\">:</span> Boolean\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* &lt;-- 프로퍼티 게터 선언 */</span>            <span class=\"token keyword\">return</span> height <span class=\"token operator\">==</span> width\n        <span class=\"token punctuation\">}</span>        <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> height <span class=\"token operator\">==</span> width\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span>\n<span class=\"token keyword\">val</span> rect <span class=\"token operator\">=</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>isSquare<span class=\"token punctuation\">)</span><span class=\"token boolean\">false</span></code></pre></div>\n<ul>\n<li>커스텀 접근자를 쓴다고 성능상 차이는 없다 가독성 차이뿐</li>\n</ul>\n<h3 id=\"패키지\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80\" aria-label=\"패키지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지</h3>\n<ul>\n<li>함수와 클래스 임포트에 차이가 없다</li>\n<li>코틀린에서는 여러 클래스를 한 파일에 넣을수 있고 파일 이름도 마음대로 지정가능해서 디스크상의 어느 디렉토리에 소스코드 파일을 위치 시키든 상관 없음</li>\n<li>자바와 호환을 위해 자바방식을 따라 디렉토리와 패키지 구조를 같게 하는게 좋다. 하지만 한 파일에 여러클래스 넣는것 주저 하지 말자</li>\n</ul>\n<h2 id=\"enum과-when\" style=\"position:relative;\"><a href=\"#enum%EA%B3%BC-when\" aria-label=\"enum과 when permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>enum과 when</h2>\n<h3 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>enum</h3>\n<ul>\n<li>\n<p>자바는 enum 코틀린은 <code class=\"language-text\">enum class</code> 키워드.</p>\n<ul>\n<li>코틀린에서 enum은 소프트 키워드라서 class앞에서만 키워드 역할이라 다른곳에서 네이밍 가능</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 간단한 enum 선언 */</span><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> Color <span class=\"token punctuation\">{</span> RED<span class=\"token punctuation\">,</span> ORANGE<span class=\"token punctuation\">,</span> YELLOW<span class=\"token punctuation\">,</span> GREEN<span class=\"token punctuation\">,</span> BLUE<span class=\"token punctuation\">,</span> INDIGO<span class=\"token punctuation\">,</span> VIOLET <span class=\"token punctuation\">}</span><span class=\"token comment\">/* 프로퍼티와 메소드가 있는 enum 선언 */</span><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> r<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> g<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> b<span class=\"token operator\">:</span> Int\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">RED</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ORANGE</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">165</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">YELLOW</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GREEN</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">BLUE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">INDIGO</span><span class=\"token punctuation\">(</span>\n        <span class=\"token number\">75</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">130</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">VIOLET</span><span class=\"token punctuation\">(</span><span class=\"token number\">238</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">238</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 세미콜론 사용 필수 */</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span> <span class=\"token number\">256</span> <span class=\"token operator\">+</span> g<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">256</span> <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"when\" style=\"position:relative;\"><a href=\"#when\" aria-label=\"when permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>when</h3>\n<ul>\n<li>when도 <code class=\"language-text\">식</code>이다</li>\n<li>break없음</li>\n<li><code class=\"language-text\">,</code>로 여러값 사용가능</li>\n<li>상수뿐만 아니라 임의의 <code class=\"language-text\">객체도 분기 조건</code>으로 가능</li>\n<li>분기 조건 없이 이용가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 간단한 when 에제 */</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getMnemonic</span><span class=\"token punctuation\">(</span>color<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Color<span class=\"token punctuation\">.</span>RED <span class=\"token operator\">-></span> <span class=\"token string\">\"Richard\"</span> Color <span class=\"token punctuation\">.</span> ORANGE\n        <span class=\"token operator\">-></span> <span class=\"token string\">\"Of\"</span> Color <span class=\"token punctuation\">.</span> YELLOW\n        <span class=\"token operator\">-></span> <span class=\"token string\">\"York\"</span> Color <span class=\"token punctuation\">.</span> GREEN\n        <span class=\"token operator\">-></span> <span class=\"token string\">\"Gave\"</span> Color <span class=\"token punctuation\">.</span> BLUE\n        <span class=\"token operator\">-></span> <span class=\"token string\">\"Battle\"</span> Color <span class=\"token punctuation\">.</span> INDIGO\n        <span class=\"token operator\">-></span> <span class=\"token string\">\"In\"</span> Color <span class=\"token punctuation\">.</span> VIOLET\n        <span class=\"token operator\">-></span> <span class=\"token string\">\"Vain\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//> > > println(getMnemonic(Color.BLUE)) Battle </span>\n\n<span class=\"token comment\">/* 한 when 분기 안에 여러 값 사용 */</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getWarmth</span><span class=\"token punctuation\">(</span>color<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Color<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>ORANGE<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>YELLOW <span class=\"token operator\">-></span> <span class=\"token string\">\"warm\"</span>\n        Color<span class=\"token punctuation\">.</span>GREEN <span class=\"token operator\">-></span> <span class=\"token string\">\"neutral\"</span>\n        Color<span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>INDIGI<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>VIOLET <span class=\"token operator\">-></span> <span class=\"token string\">\"cold\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//> > > println(getWarmth(Color.ORANGE)) warm</span></code></pre></div>\n<h3 id=\"스마트캐스트로-when\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A7%88%ED%8A%B8%EC%BA%90%EC%8A%A4%ED%8A%B8%EB%A1%9C-when\" aria-label=\"스마트캐스트로 when permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스마트캐스트로 when</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Exprclass <span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Exprclass\n\n<span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> left <span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">val</span> right<span class=\"token operator\">:</span> Expr\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Exprfun\n\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">is</span> Num <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span>value\n    <span class=\"token comment\">/* is에 의해  e가 자동으로 Num으로 캐스팅 된다 */</span>\n    <span class=\"token keyword\">is</span> Sum <span class=\"token operator\">-></span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown expression\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"루프\" style=\"position:relative;\"><a href=\"#%EB%A3%A8%ED%94%84\" aria-label=\"루프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>루프</h2>\n<ul>\n<li>while은 자바와 동일</li>\n<li>for은 자바의 for-each형태만 존재 <code class=\"language-text\">for&lt;아이템> in&lt;원소들></code></li>\n<li>코틀린에서는 <code class=\"language-text\">범위(range)</code>를 사용한다. 예) <code class=\"language-text\">val oneToTen = 1..10</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">fizzByzz</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">%</span> <span class=\"token number\">15</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"FizzBuzz\"</span> i <span class=\"token operator\">%</span>\n    <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Fizz\"</span> i <span class=\"token operator\">%</span>\n    <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Buzz\"</span>\n    <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$i</span> \"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">fizzBuzz</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//1 2 Fizz 4 Buzz Fizz 7 ...</span>\n\n<span class=\"token comment\">/* 증가 값을 갖고 범위 이터레이션하기 */</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">100</span> downTo <span class=\"token number\">1</span> step <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">fizzBuzz</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"맵에-대한-이터레이션\" style=\"position:relative;\"><a href=\"#%EB%A7%B5%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"맵에 대한 이터레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맵에 대한 이터레이션</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 맵 이터레이션 */</span>\n<span class=\"token keyword\">val</span> binaryReps <span class=\"token operator\">=</span> TreeMap<span class=\"token operator\">&lt;</span>Char<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">in</span> <span class=\"token string\">'A'</span><span class=\"token operator\">..</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> binary <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> binaryReps <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> binary\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> binaryReps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$letter</span> = <span class=\"token interpolation variable\">$binary</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* 출력 */</span>\n<span class=\"token comment\">//A = 1000001 B = 1000010 C = 1000011...</span>\n\n<span class=\"token comment\">/* 컬렉션 이터레이션 */</span>\n<span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"1001\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">withIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$index</span>: <span class=\"token interpolation variable\">$element</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* 출력 */</span>\n<span class=\"token comment\">// 0: 101: 112: 1001</span></code></pre></div>\n<h3 id=\"in으로-컬렉션-범위의-원소-검사\" style=\"position:relative;\"><a href=\"#in%EC%9C%BC%EB%A1%9C-%EC%BB%AC%EB%A0%89%EC%85%98-%EB%B2%94%EC%9C%84%EC%9D%98-%EC%9B%90%EC%86%8C-%EA%B2%80%EC%82%AC\" aria-label=\"in으로 컬렉션 범위의 원소 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in으로 컬렉션 범위의 원소 검사</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">isLetter</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> Char<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">'a'</span><span class=\"token operator\">..</span><span class=\"token string\">'z'</span> <span class=\"token operator\">||</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">'A'</span><span class=\"token operator\">..</span><span class=\"token string\">'Z'</span><span class=\"token keyword\">fun</span> <span class=\"token function\">isNotDigit</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> Char<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    c <span class=\"token operator\">!</span><span class=\"token keyword\">in</span> <span class=\"token string\">'0'</span><span class=\"token operator\">..</span><span class=\"token string\">'9'</span> <span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">isLetter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token boolean\">true</span> <span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNotDigit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token boolean\">true</span></code></pre></div>\n<h2 id=\"예외처리\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC\" aria-label=\"예외처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외처리</h2>\n<ul>\n<li>코트린의 <code class=\"language-text\">throw</code>는 <code class=\"language-text\">if</code>와 마찬가지로 <code class=\"language-text\">식</code>이다. 다만 <code class=\"language-text\">중괄호 필수</code></li>\n<li>자바와 달리 <code class=\"language-text\">new</code> 키워드를 붙일 필요가 없다.</li>\n<li><code class=\"language-text\">unchecked exception</code>만 존재해서 예외에 있어서 잡지 않아도 된다</li>\n<li>throws절이 없다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>percentage <span class=\"token operator\">!</span><span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A percentage value must be be between 0 and 100: <span class=\"token interpolation variable\">$percentage</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"2장. 코틀린 기초 문법","date":"August 19, 2021"}}},"pageContext":{"slug":"/kotlin/2장.-코틀린-기초-문법/","previous":null,"next":{"fields":{"slug":"/kotlin/1장. kotlin 개요/"},"frontmatter":{"title":"1장. kotlin 개요"}}}},"staticQueryHashes":["3128451518","767493094"]}